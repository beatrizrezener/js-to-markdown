const fs = require("fs");
//This file uses `createIndexFilePath` function from [Common Utils](./common.md)
const CommonUtils = require("./common");

// # Functions to write markdown array data to file

// ## writeMDFile
// This function receives the propeties and prints data to markdown file:
//<details>
//<summary>Function parameters</summary>
//<br>
// - `componentName`: component name from class|function, used to create the `export const` at the beginning of js markdown;
// - `fileName`: path to markdown file generated by `createMDFilePath` at common.js;
// - `mdLinesArray`: array with markdown lines to be printed;
// - `propTypesArray`: array with proptypes table lines;
//</details>
//@CBStart
exports.writeMDFile = (
  componentName,
  fileName,
  mdLinesArray,
  propTypesArray
) => {
  const finalMDArray = mdLinesArray.concat(propTypesArray);

  const mdStringData = finalMDArray.join("");

  const file = fs.createWriteStream(fileName);

  if (globalConfiguration.outputJsMarkdown) {
    file.write("export const " + componentName + " = \n");
  }

  file.write(mdStringData);
  file.end();
};
//@CBEnd

//---
// ## writeIndexFile
// Function used to print he index.js file if the `outputJsMarkdown` config prop is `true`.
// The index will import all .md.js at `output` directory and exports then.
//@CBStart
exports.writeIndexFile = (arrayOfComponentsToIndex) => {
  const file = fs.createWriteStream(CommonUtils.createIndexFilePath());
  arrayOfComponentsToIndex.forEach((component) => {
    file.write(`import { ${component} } from './${component}.md';\n`);
  });

  file.write(`\nexport { \n ${arrayOfComponentsToIndex.join(",\n")} \n}`);
  file.end();
};
//@CBEnd
